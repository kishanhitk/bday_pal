import {
  Box,
  Button,
  Input,
  Link,
  VStack,
  Text,
  FormControl,
  FormHelperText,
  FormLabel,
  Spinner,
  Heading,
} from "@chakra-ui/react";
import Head from "next/head";
import Image from "next/image";
import React, { FormEvent, useRef, useState } from "react";
import styles from "../styles/Home.module.css";
import { checkIfDateIsPallindrom, findNextDate } from "../utils/calculator";
export default function Home() {
  const [birthDay, setBirthDay] = useState(new Date());
  const [isPallindrome, setIsPallindrome] = React.useState(false);
  const [isPallindromeVisible, setIsPallindromeVisible] = React.useState(false);
  const [isLoading, setIsLoading] = React.useState(false);
  const [pallindromicDate, setPallindromicDate] = React.useState<
    string | undefined
  >("");
  const [nextPallindromicDate, setNextPallindromicDate] = React.useState("");

  const dateRef = useRef<HTMLInputElement>();
  const handleReset = () => {
    dateRef.current.value = "";
    setBirthDay(new Date());
    setIsPallindrome(false);
    setIsPallindromeVisible(false);
    setNextPallindromicDate("");
  };

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setNextPallindromicDate("");
    console.log(birthDay.getDate());
    setIsLoading(true);
    setIsPallindromeVisible(false);

    await setTimeout(() => {
      const pallindromicDate = checkIfDateIsPallindrom(birthDay);
      if (pallindromicDate != null) {
        setPallindromicDate(checkIfDateIsPallindrom(birthDay));
        setIsPallindrome(true);
      } else {
        const [nextDate, duration] = findNextDate(birthDay);
        setNextPallindromicDate(
          `Next Pallindromic date is ${nextDate}.\n It is ${duration} days away.`
        );
        setIsPallindrome(false);
      }
      setIsPallindromeVisible(true);
      setIsLoading(false);
    }, 3000);
    console.log(checkIfDateIsPallindrom(birthDay));
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>Birthday Pallindrome Checker</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Heading m={5} textAlign="center">
          Is your birthday a pallindrome?
        </Heading>

        <Text mb={5} size="lg" fontSize="2xl">
          Check out here.
        </Text>
        <Box bg="blue.100" p="5" rounded="10" width="400px" maxWidth="90%">
          <VStack
            align="center"
            justify="center"
            alignItems="center"
            justifyContent="center"
          >
            <form
              style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
              }}
              onSubmit={handleSubmit}
            >
              <FormControl m="2">
                <FormLabel>Enter your birthday</FormLabel>
                <Input
                  ref={dateRef}
                  variant="filled"
                  required
                  type="date"
                  onChange={(e) => setBirthDay(new Date(e.target.value))}
                />
                <FormHelperText>We do not store any data.</FormHelperText>
              </FormControl>

              <Button
                variant="solid"
                type="submit"
                colorScheme="messenger"
                width="100%"
              >
                Check
              </Button>
              <Button
                type="reset"
                variant="ghost"
                colorScheme="messenger"
                onClick={handleReset}
              >
                Reset
              </Button>
            </form>
            {isLoading && (
              <VStack
                p={5}
                align="center"
                justify="center"
                alignItems="center"
                justifyContent="center"
              >
                <Spinner
                  thickness="4px"
                  speed="0.65s"
                  emptyColor="gray.200"
                  color="blue.500"
                  size="xl"
                />
                <Text>Crunching Numbers...</Text>
              </VStack>
            )}
            {isPallindromeVisible && (
              <>
                <Text textAlign="center" fontSize="2xl">
                  {" "}
                  {isPallindrome
                    ? `Yay!! Your Birthday is Lucky in ${pallindromicDate} format`
                    : `${nextPallindromicDate}`}
                </Text>
                {isPallindrome ? (
                  <Image
                    src="https://media.giphy.com/media/YnBntKOgnUSBkV7bQH/giphy.gif"
                    alt="Happy Gif"
                    height={100}
                    width={100}
                  />
                ) : (
                  <Image
                    src="https://media.giphy.com/media/BEob5qwFkSJ7G/giphy.gif"
                    alt="Sad Gif"
                    height={100}
                    width={100}
                  />
                )}
              </>
            )}
          </VStack>
        </Box>
      </main>
      <Box bg="blue.100" rounded="10" width="100%">
        <footer className={styles.footer}>
          <Link href="https://kishans.in" target="_blank">
            Built by Kishan
          </Link>
        </footer>
      </Box>
    </div>
  );
}
